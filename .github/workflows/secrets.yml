# .github/workflows/reusable-secrets-sync.yml
name: Reusable - Sync Secrets to AWS SM

on:
  workflow_call:
    # Inputs required by this reusable workflow
    inputs:
      aws_region:
        description: 'The AWS region to sync secrets to (e.g., eu-central-1)'
        required: false
        type: string
        default: 'eu-central-1'
      secrets_to_ignore:
        description: 'Space-separated list of GitHub secret names to NOT sync to AWS SM'
        required: false
        type: string
        default: 'GITHUB_TOKEN' # Default ignore list

jobs:
  sync_secrets_to_aws:
    name: Sync Provided Secrets to AWS SM
    runs-on: ubuntu-latest
    # Use inputs and inherited secrets for environment variables
    env:
      AWS_REGION: ${{ inputs.aws_region }}
      SECRETS_TO_IGNORE: ${{ inputs.secrets_to_ignore }}

    steps:
      - name: Step 1 - Get Secret Names from Input JSON
        id: get_names
        run: |
          echo "Extracting secret names from input JSON..."
          names_output="" # Default to empty string
          # Use the SECRETS_JSON_INPUT env var passed from the job level
          if [ -n "$SECRETS_JSON_INPUT" ] && [ "$SECRETS_JSON_INPUT" != "{}" ]; then
            # Use jq to get keys, join them into a single space-separated string
            names_output=$(echo "$SECRETS_JSON_INPUT" | jq -r 'keys | join(" ")')
            echo "Found names."
          else
            echo "No secrets found in input JSON or JSON empty."
          fi
          # Set the output variable 'names_list' for the next step
          echo "names_list=${names_output}" >> $GITHUB_OUTPUT
          echo "Outputting names_list: ${names_output}" # Log what is being outputted

      - name: Step 2 - Verify AWS Credentials
        run: |
          echo "Attempting to verify AWS credentials using environment variables..."
          # AWS CLI will automatically pick up AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION from env
          if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
             echo "Error: AWS_ACCESS_KEY_ID or AWS_SECRET_ACCESS_KEY not found in environment."
             echo "Ensure they are passed correctly from the calling workflow via 'secrets:'."
             exit 1
          else
             echo "AWS credentials found (masked in logs)."
             aws sts get-caller-identity || { echo "AWS CLI authentication failed."; exit 1; }
             echo "AWS CLI authentication successful."
          fi

      - name: Step 3 - Sync Secrets to AWS (Applying Ignore List)
        run: |
          echo "Starting sync process (with ignore list)..."
          # Uses AWS credentials (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY) from env vars automatically
          # Uses AWS_REGION from env vars automatically
          echo "Target AWS Region: $AWS_REGION"
          echo "Ignoring secrets named: $SECRETS_TO_IGNORE"

          # Get the list of names from the previous step's output
          names_to_sync="${{ steps.get_names.outputs.names_list }}"

          if [ -z "$names_to_sync" ]; then
            echo "No secret names passed from Step 1. Exiting."
            exit 0
          fi

          echo "Will attempt to sync secrets named: $names_to_sync"

          # Loop through all potential secret names passed from Step 1
          for secret_name in $names_to_sync; do

            # --- Ignore List Check ---
            # We pad both the list and the name with spaces for safer whole-word matching
            if echo " $SECRETS_TO_IGNORE " | grep -q " $secret_name "; then
              echo "Skipping sync for: $secret_name (in ignore list: '$SECRETS_TO_IGNORE')"
              continue # Skip to the next secret name
            fi
            # --- End Ignore List Check ---

            # --- Crucial Check: Skip AWS Auth Keys ---
            # We explicitly avoid syncing the keys used for auth, even if not in ignore list
            if [ "$secret_name" = "AWS_ACCESS_KEY_ID" ] || [ "$secret_name" = "AWS_SECRET_ACCESS_KEY" ]; then
              echo "Skipping sync for: $secret_name (Used for authentication)"
              continue # Skip to the next secret name
            fi
            # --- End AWS Auth Key Check ---

            # --- Get Secret Value from Input JSON ---
            # Use jq to extract the value for the current secret name from the JSON string
            secret_value=$(echo "$SECRETS_JSON_INPUT" | jq -r --arg name "$secret_name" '.[$name]')

            # Check if jq returned 'null' (secret exists but is null) or empty (secret doesn't exist in JSON)
            # Note: jq returns the string "null" for JSON null values.
            if [ -z "$secret_value" ] || [ "$secret_value" = "null" ]; then
               echo "Skipping sync for: $secret_name (Value is empty or null in provided JSON)"
               continue # Go to the next secret name
            fi
            # --- End Get Secret Value ---

            echo "Attempting sync for: $secret_name"

            # Blunt "Upsert": Try create, ignore error, then try put, ignore error.
            # Added error checking for clearer logs.
            if ! aws secretsmanager create-secret --name "$secret_name" --secret-string "$secret_value" --region "$AWS_REGION"; then
              echo "Secret '$secret_name' likely already exists. Attempting update..."
              if ! aws secretsmanager put-secret-value --secret-id "$secret_name" --secret-string "$secret_value" --region "$AWS_REGION"; then
                echo "ERROR: Failed to update secret '$secret_name' in region '$AWS_REGION'."
                # Decide if you want to fail the job here: exit 1
              else
                 echo "Successfully updated secret '$secret_name'."
              fi
            else
              echo "Successfully created secret '$secret_name'."
            fi
          done

          echo "Sync attempt finished. Check AWS Secrets Manager manually."