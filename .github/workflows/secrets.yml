# Filename: your-org/shared-workflows/.github/workflows/reusable-sync-aws-secrets.yml
name: Reusable - Sync GH Secrets to AWS SM

on:
  workflow_call:
    inputs:
      aws-region:
        description: 'AWS region for Secrets Manager'
        required: false
        type: string
        default: 'eu-central-1'
      secrets-to-ignore:
        description: 'Space-separated list of secrets to ignore'
        required: false
        type: string
        default: "AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY GITHUB_TOKEN" # Default ignore list
    # Secrets that the *calling* workflow must provide access to.
    # 'inherit' in the caller passes all its secrets here.
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'AWS Access Key ID for authentication'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS Secret Access Key for authentication'
        required: true
      # We don't explicitly list *all* secrets to sync here.
      # We rely on the caller using 'secrets: inherit' to make them
      # available in the 'secrets' context used by toJSON().

jobs:
  sync_secrets:
    name: Sync Secrets to AWS SM (Ignoring Specific Secrets)
    runs-on: ubuntu-latest
    # Use inputs and secrets passed by the caller
    env:
      AWS_REGION: ${{ inputs.aws-region }}
      SECRETS_TO_IGNORE: ${{ inputs.secrets-to-ignore }}

    steps:
      - name: Configure AWS Credentials (IAM User)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Use secrets passed from the calling workflow
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Step 1 - Get All Secret Names Available to the Caller
        id: get_names
        # Use the 'secrets' context which contains secrets passed from the caller
        env:
          GITHUB_SECRETS_JSON: ${{ toJSON(secrets) }}
        run: |
          echo "Extracting all available secret names..."
          names_output="" # Default to empty string
          # Check if the JSON is not empty and not just the AWS keys we explicitly passed
          # Note: GITHUB_TOKEN is often present by default
          if [ -n "$GITHUB_SECRETS_JSON" ] && [ "$GITHUB_SECRETS_JSON" != "{}" ]; then
              # Filter out the explicitly passed secrets and GITHUB_TOKEN before extracting keys
              names_output=$(echo "$GITHUB_SECRETS_JSON" | jq -r 'del(.AWS_ACCESS_KEY_ID, .AWS_SECRET_ACCESS_KEY, .GITHUB_TOKEN) | keys | join(" ")')
              if [ -n "$names_output" ]; then
                  echo "Found potential secrets to sync."
              else
                  echo "No secrets found other than AWS keys/GitHub token."
              fi
          else
              echo "No secrets found or JSON empty."
          fi
          # Set the output variable 'names_list' for the next step
          echo "names_list=${names_output}" >> $GITHUB_OUTPUT
          echo "Outputting names_list (potential sync candidates): ${names_output}" # Log what is being outputted


      - name: Step 2 - Sync Secrets to AWS (Applying Ignore List)
        # Important: Pass ALL secrets from the caller to this step's env
        # This allows the indirect expansion `${!secret_name}` to work.
        env: ${{ secrets }}
        run: |
          echo "Starting sync process (with ignore list)..."
          # Use the SECRETS_TO_IGNORE env var (populated from input)
          echo "Ignoring secrets named: $SECRETS_TO_IGNORE"
          echo "WARNING: This relies on undocumented behavior ('env: ${{ secrets }}')."
          echo "WARNING: Errors from AWS CLI will be ignored!"

          # Get the list of names from the previous step's output
          names_to_sync="${{ steps.get_names.outputs.names_list }}"

          if [ -z "$names_to_sync" ]; then
            echo "No potential secret names found to sync (after filtering). Exiting."
            exit 0
          fi

          echo "Will attempt to sync secrets named (before final ignore check): $names_to_sync"

          # Loop through potential secret names identified in Step 1
          for secret_name in $names_to_sync; do

            # --- Check if the current secret name is in the ignore list ---
            if echo " $SECRETS_TO_IGNORE " | grep -q " $secret_name "; then
              echo "Skipping sync for: $secret_name (in ignore list)"
              continue # Skip to the next secret name in the loop
            fi
            # --- End Ignore List Check ---

            # Get value via BASH indirect expansion. Relies on 'env: ${{ secrets }}'
            secret_value="${!secret_name}"

            # Skip secrets if their value IS TRULY empty OR if it wasn't populated in env
            # (Should generally be populated due to env: ${{ secrets }})
            if [ -z "$secret_value" ]; then
               echo "Skipping sync for: $secret_name (Value is empty OR env var not populated)"
               continue
            fi

            echo "Attempting sync for: $secret_name"

            # Blunt "Upsert"
            aws secretsmanager create-secret --name "$secret_name" --secret-string "$secret_value" --region "$AWS_REGION" --no-cli-pager || true
            aws secretsmanager put-secret-value --secret-id "$secret_name" --secret-string "$secret_value" --region "$AWS_REGION" --no-cli-pager || true
          done

          echo "Sync attempt finished (with ignore list applied). Check AWS Secrets Manager manually."