name: Sync GH Secrets to AWS SM with Ignore List

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'

jobs:
  sync_secrets_minimal:
    name: Sync Secrets to AWS SM (Ignoring Specific Secrets)
    runs-on: ubuntu-latest
    env:
      AWS_REGION: 'eu-central-1'
      SECRETS_TO_IGNORE: "AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY github_token" # Those are secrets which will be ignored

    steps:
      - name: Configure AWS Credentials (IAM User)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Step 1 - Get All Secret Names
        id: get_names 
        env:
          GITHUB_SECRETS_JSON: ${{ toJSON(secrets) }}
        run: |
          echo "Extracting all available secret names..."
          names_output="" # Default to empty string
          if [ -n "$GITHUB_SECRETS_JSON" ] && [ "$GITHUB_SECRETS_JSON" != "{}" ]; then
            # Use jq to get keys, join them into a single space-separated string
            names_output=$(echo "$GITHUB_SECRETS_JSON" | jq -r 'keys | join(" ")')
            echo "Found names."
          else
            echo "No secrets found or JSON empty."
          fi
          # Set the output variable 'names_list' for the next step
          echo "names_list=${names_output}" >> $GITHUB_OUTPUT
          echo "Outputting names_list: ${names_output}" # Log what is being outputted

      - name: Step 2 - Sync Secrets to AWS (Applying Ignore List)
        env: ${{ secrets }}
        run: |
          echo "Starting sync process (with ignore list)..."
          # Use the SECRETS_TO_IGNORE variable defined at the job level
          echo "Ignoring secrets named: $SECRETS_TO_IGNORE"
          echo "WARNING: This relies on undocumented behavior ('env: \${{ secrets }}')."
          echo "WARNING: Errors from AWS CLI will be ignored!"

          echo "Building prefix"
          REPO_NAME=$(basename ${{ github.repository }})
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME=$(basename ${{ github.ref }})
          fi
          prefix="env/${REPO_NAME}/${BRANCH_NAME}/"
          # Get the list of names from the previous step's output
          names_to_sync="${{ steps.get_names.outputs.names_list }}"

          if [ -z "$names_to_sync" ]; then
            echo "No secret names passed from Step 1. Exiting."
            exit 0
          fi

          echo "Will attempt to sync secrets named (after filtering): $names_to_sync"

          # Loop through all potential secret names
          for secret_name in $names_to_sync; do

            # --- ADDITION: Check if the current secret name is in the ignore list ---
            # We pad both the list and the name with spaces for safer whole-word matching
            # grep -q returns 0 if found (match), 1 if not found.
            if echo " $SECRETS_TO_IGNORE " | grep -q " $secret_name "; then
              echo "Skipping sync for: $secret_name (in ignore list defined by SECRETS_TO_IGNORE env var)"
              continue # Skip to the next secret name in the loop
            fi
            # --- End Ignore List Check ---

            # Get value via BASH indirect expansion. This relies on
            # 'env: ${{ secrets }}' having populated this step's environment.
            secret_value="${!secret_name}"

            # Skip secrets if their value IS TRULY empty OR if it wasn't populated in env
            if [ -z "$secret_value" ]; then
               echo "Skipping sync for: $secret_name (Value is empty OR env var not populated)"
               continue # Go to the next secret name in the loop
            fi

            echo "Attempting sync for: $secret_name"

            # Blunt "Upsert": Try create, ignore result, then try put, ignore result
            aws secretsmanager create-secret --name "$prefix$secret_name" --secret-string "$secret_value" --region "$AWS_REGION" || true
            aws secretsmanager put-secret-value --secret-id "$prefix$secret_name" --secret-string "$secret_value" --region "$AWS_REGION" || true
          done

          echo "Sync attempt finished (with ignore list applied). Check AWS Secrets Manager manually."