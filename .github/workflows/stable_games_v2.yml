name: Reusable ECS Deployment Workflow

on:
  workflow_call:
    inputs:
      is_monorepo:
        required: true
        type: boolean
      apps:
        required: false
        type: string
      aws_region:
        required: true
        type: string
      dr_aws_region:
        required: true
        type: string
      ecs_cluster_name:
        required: true
        type: string
      build_args:
        required: false
        type: string
        default: ""
      github_repo:
        required: true
        type: string
      github_branch:
        required: true
        type: string
      # superposition controls
      superposition:
        required: false
        type: boolean
        default: false
      superposition_number:
        required: false
        type: string  # treat as string; will cast in bash
        default: "1"
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

####################################################################
# BUILD & PUSH -----------------------------------------------------
####################################################################
jobs:
  build-and-push:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Retrieve AWS Account ID
        id: aws-account-id
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV

      - name: Build & push (monorepo)
        if: ${{ inputs.is_monorepo }}
        env:
          IMAGE_TAG: latest
        run: |
          # --- optional project renames kept from original template ---
          cp -r apps/aviator-round-worker/ apps/aviator-round-worker-rtp2 || true
          cp -r apps/aviator-api/          apps/aviator-api-rtp2          || true
          sed -i 's/aviator-round-worker/aviator-round-worker-rtp2/g' apps/aviator-round-worker-rtp2/project.json || true
          sed -i 's/aviator-api/aviator-api-rtp2/g'             apps/aviator-api-rtp2/project.json             || true

          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.${{ inputs.aws_region }}.amazonaws.com"

          for app in ${{ inputs.apps }}; do
            if [ "${{ inputs.superposition }}" = "true" ]; then
              MAX="${{ inputs.superposition_number }}"
              for i in $(seq 0 "$MAX"); do
                if [ "$i" -eq 0 ]; then
                  SUFFIX=""
                else
                  SUFFIX="$i"
                fi
                SERVICE_NAME="${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-$app${SUFFIX}"
                echo "Building $SERVICE_NAME"
                docker build -t "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG" . --build-arg=APP_NAME="$app"
                docker push "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG"
              done
            else
              SERVICE_NAME="${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-$app"
              echo "Building $SERVICE_NAME"
              docker build -t "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG" . --build-arg=APP_NAME="$app"
              docker push "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG"
            fi
          done

      - name: Build & push (single repo)
        if: ${{ !inputs.is_monorepo }}
        env:
          IMAGE_TAG: latest
        run: |
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.${{ inputs.aws_region }}.amazonaws.com"
          if [ "${{ inputs.superposition }}" = "true" ]; then
            MAX="${{ inputs.superposition_number }}"
            for i in $(seq 0 "$MAX"); do
              if [ "$i" -eq 0 ]; then
                SUFFIX=""
              else
                SUFFIX="$i"
              fi
              SERVICE_NAME="${{ inputs.github_branch }}-${{ inputs.github_repo }}${SUFFIX}"
              echo "Building $SERVICE_NAME"
              docker build ${{ inputs.build_args }} -t "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG" .
              docker push "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG"
            done
          else
            SERVICE_NAME="${{ inputs.github_branch }}-${{ inputs.github_repo }}"
            docker build ${{ inputs.build_args }} -t "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG" .
            docker push "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG"
          fi

####################################################################
# DEPLOY -----------------------------------------------------------
####################################################################
  deploy:
    name: Deploy to ECS
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Deploy (monorepo)
        if: ${{ inputs.is_monorepo }}
        run: |
          for app in ${{ inputs.apps }}; do
            if [ "${{ inputs.superposition }}" = "true" ]; then
              MAX="${{ inputs.superposition_number }}"
              for i in $(seq 0 "$MAX"); do
                if [ "$i" -eq 0 ]; then SUFFIX=""; else SUFFIX="$i"; fi
                SERVICE_NAME="${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-$app${SUFFIX}"
                CLUSTER_NAME="${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-aviator-cluster"
                aws ecs update-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" --force-new-deployment
              done
            else
              SERVICE_NAME="${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-$app"
              CLUSTER_NAME="${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-aviator-cluster"
              aws ecs update-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" --force-new-deployment
            fi
          done

      - name: Deploy (single repo)
        if: ${{ !inputs.is_monorepo }}
        run: |
          if [ "${{ inputs.superposition }}" = "true" ]; then
            MAX="${{ inputs.superposition_number }}"
            for i in $(seq 0 "$MAX"); do
              if [ "$i" -eq 0 ]; then SUFFIX=""; else SUFFIX="$i"; fi
              SERVICE_NAME="${{ inputs.github_branch }}-${{ inputs.github_repo }}${SUFFIX}"
              CLUSTER_NAME="${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-aviator-cluster"
              aws ecs update-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" --force-new-deployment
            done
          else
            SERVICE_NAME="${{ inputs.github_branch }}-${{ inputs.github_repo }}"
            CLUSTER_NAME="${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-aviator-cluster"
            aws ecs update-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" --force-new-deployment
          fi

####################################################################
# DR BUILD & DEPLOY -----------------------------------------------
####################################################################
  dr_build-and-push:
    name: Build and push Docker image in DR region
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials for DR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.dr_aws_region }}

      - name: Log in to Amazon ECR (DR)
        uses: aws-actions/amazon-ecr-login@v1

      - name: Retrieve AWS Account ID (DR)
        id: dr-aws-account-id
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV

      - name: Build & push (monorepo, DR)
        if: ${{ inputs.is_monorepo }}
        env:
          IMAGE_TAG: latest
        run: |
          cp -r apps/aviator-round-worker/ apps/aviator-round-worker-rtp2 || true
          cp -r apps/aviator-api/          apps/aviator-api-rtp2          || true
          sed -i 's/aviator-round-worker/aviator-round-worker-rtp2/g' apps/aviator-round-worker-rtp2/project.json || true
          sed -i 's/aviator-api/aviator-api-rtp2/g'             apps/aviator-api-rtp2/project.json             || true

          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.${{ inputs.dr_aws_region }}.amazonaws.com"
          for app in ${{ inputs.apps }}; do
            if [ "${{ inputs.superposition }}" = "true" ]; then
              MAX="${{ inputs.superposition_number }}"
              for i in $(seq 0 "$MAX"); do
                [ "$i" -eq 0 ] && SUFFIX="" || SUFFIX="$i"
                SERVICE_NAME="${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-$app${SUFFIX}"
                docker build -t "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG" . --build-arg=APP_NAME="$app"
                docker push "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG"
              done
            else
              SERVICE_NAME="${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-$app"
              docker build -t "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG" . --build-arg=APP_NAME="$app"
              docker push "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG"
            fi
          done

      - name: Build & push (single repo, DR)
        if: ${{ !inputs.is_monorepo }}
        env:
          IMAGE_TAG: latest
        run: |
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.${{ inputs.dr_aws_region }}.amazonaws.com"
          if [ "${{ inputs.superposition }}" = "
