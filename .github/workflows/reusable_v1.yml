name: Multi-Region ECS Deploy

on:
  workflow_call:
    inputs:
      branch-name:
        required: true
        type: string
      repository-name:
        required: true
        type: string
      brand-name:
        required: true
        type: string
      regions:
        required: false
        type: string
        default: "eu-central-1"
        description: "Comma-separated list of regions to deploy to"
      auto-deploy-regions:
        required: false
        type: string
        default: "eu-central-1"
        description: "Regions that deploy automatically"
      slack-channel:
        required: false
        type: string
        default: "#deployments"
        description: "Slack channel for notifications"
      slack-team:
        required: false
        type: string
        description: "Team name for notification context"
      slack-critical-tag:
        required: false
        type: string
        default: "@here"
        description: "Tag for critical notifications"
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      NPM_TOKEN:
        required: false
      NPM_REGISTRY:
        required: false
      SLACK_WEBHOOK_URL:
        required: false
        description: "Slack webhook URL for notifications"

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}
      regions: ${{ steps.parse-regions.outputs.regions }}
      auto-regions: ${{ steps.parse-regions.outputs.auto_regions }}
      manual-regions: ${{ steps.parse-regions.outputs.manual_regions }}
      env: ${{ steps.set-env.outputs.env }}
      auto-regions-json: ${{ steps.create-arrays.outputs.auto_regions_json }}
      manual-regions-json: ${{ steps.create-arrays.outputs.manual_regions_json }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Parse region configuration
        id: parse-regions
        run: |
          if [ -n "${{ inputs.regions }}" ]; then
            # Parse comma-separated regions
            echo "regions=${{ inputs.regions }}" >> $GITHUB_OUTPUT
          else
            # Use branch-based defaults
            case "${{ inputs.branch-name }}" in
              "prod")
                echo "regions=eu-central-1,us-east-1,ap-southeast-1" >> $GITHUB_OUTPUT
                echo "auto_regions=eu-central-1" >> $GITHUB_OUTPUT
                echo "manual_regions=us-east-1,ap-southeast-1" >> $GITHUB_OUTPUT
                ;;
              "staging")
                echo "regions=eu-central-1,us-east-1" >> $GITHUB_OUTPUT
                echo "auto_regions=eu-central-1" >> $GITHUB_OUTPUT
                echo "manual_regions=us-east-1" >> $GITHUB_OUTPUT
                ;;
              *)
                echo "regions=eu-central-1" >> $GITHUB_OUTPUT
                echo "auto_regions=eu-central-1" >> $GITHUB_OUTPUT
                echo "manual_regions=" >> $GITHUB_OUTPUT
                ;;
            esac
          fi

          # If auto-deploy-regions is specified, override
          if [ -n "${{ inputs.auto-deploy-regions }}" ]; then
            echo "auto_regions=${{ inputs.auto-deploy-regions }}" >> $GITHUB_OUTPUT
          fi

          # Calculate manual regions
          IFS=',' read -ra ALL_REGIONS <<< "${{ steps.parse-regions.outputs.regions }}"
          IFS=',' read -ra AUTO_REGIONS <<< "${{ steps.parse-regions.outputs.auto_regions }}"

          MANUAL_REGIONS=""
          for region in "${ALL_REGIONS[@]}"; do
            if [[ ! " ${AUTO_REGIONS[@]} " =~ " ${region} " ]]; then
              if [ -z "$MANUAL_REGIONS" ]; then
                MANUAL_REGIONS="$region"
              else
                MANUAL_REGIONS="$MANUAL_REGIONS,$region"
              fi
            fi
          done

          echo "manual_regions=$MANUAL_REGIONS" >> $GITHUB_OUTPUT

      - name: Create JSON arrays for matrix
        id: create-arrays
        run: |
          # Create JSON array for auto regions
          echo "auto_regions_json=[\"${{ steps.parse-regions.outputs.auto_regions }}\"]" >> $GITHUB_OUTPUT

          # Create JSON array for manual regions
          echo "manual_regions_json=[\"${{ steps.parse-regions.outputs.manual_regions }}\"]" >> $GITHUB_OUTPUT

      - name: Set environment variables dynamically
        id: set-env
        run: |
          BRANCH_NAME="${{ inputs.branch-name }}"
          REPOSITORY_NAME="${{ inputs.repository-name }}"
          BRAND_NAME="${{ inputs.brand-name }}"
          case "$BRANCH_NAME" in
            "dev")
              ENV="dev"
              CLUSTER_SUFFIX="dev"
              ;;
            "staging")
              ENV="staging"
              CLUSTER_SUFFIX="staging"
              ;;
            "prod")
              ENV="prod"
              CLUSTER_SUFFIX="prod"
              ;;
            *)
              echo "Unknown branch name: $BRANCH_NAME"
              exit 1
              ;;
          esac
          CLUSTER_NAME="${CLUSTER_SUFFIX}-${BRAND_NAME}-cluster"
          SERVICE_NAME="${CLUSTER_SUFFIX}-${BRAND_NAME}-${REPOSITORY_NAME}"

          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "env=$ENV" >> $GITHUB_OUTPUT

      - name: Debug inputs and outputs
        run: |
          echo "Repository: ${{ inputs.repository-name }}"
          echo "Branch: ${{ inputs.branch-name }}"
          echo "Team: ${{ inputs.slack-team }}"
          echo "Regions: ${{ steps.parse-regions.outputs.regions }}"
          echo "Slack Channel: ${{ inputs.slack-channel }}"

      - name: Notify deployment started
        uses: 8398a7/action-slack@v3.15.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: custom
          channel: ${{ inputs.slack-channel }}
          text: |
            🚀 *Deployment Started*
            • Repository: `${{ toJSON(inputs.repository-name) }}`
            • Branch: `${{ toJSON(inputs.branch-name) }}`
            • Team: ${{ toJSON(inputs.slack-team) }}`
            • Regions: ${{ toJSON(steps.parse-regions.outputs.regions) }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image to Amazon ECR
        id: build
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${SERVICE_NAME}:latest \
            --build-arg NPM_REGISTRY=${{ secrets.NPM_REGISTRY }} \
            --build-arg NPM_TOKEN=${{ secrets.NPM_TOKEN }} .
          docker push ${{ steps.login-ecr.outputs.registry }}/${SERVICE_NAME}:latest
          echo "image-uri=${{ steps.login-ecr.outputs.registry }}/${SERVICE_NAME}:latest" >> $GITHUB_OUTPUT

  deploy-auto-regions:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: ${{ fromJson(needs.build.outputs.auto_regions_json) }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Deploy to ${{ matrix.region }}
        run: |
          aws ecs update-service \
            --cluster ${{ needs.build.outputs.env }}-${{ inputs.brand-name }}-cluster \
            --service ${{ needs.build.outputs.env }}-${{ inputs.brand-name }}-${{ inputs.repository-name }} \
            --region ${{ matrix.region }} \
            --force-new-deployment

      - name: Notify auto-deployment success
        uses: 8398a7/action-slack@v3.15.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: custom
          channel: ${{ inputs.slack-channel }}
          text: |
            ✅ *Auto-Deployment Success*
            • Region: `${{ toJSON(matrix.region) }}`
            • Cluster: `${{ toJSON(needs.build.outputs.env) }}-${{ toJSON(inputs.brand-name) }}-cluster`
            • Status: Deployed automatically

  deploy-manual-regions:
    needs: [build, deploy-auto-regions]
    runs-on: ubuntu-latest
    if: needs.build.outputs.manual-regions != ''
    strategy:
      matrix:
        region: ${{ fromJson(needs.build.outputs.manual_regions_json) }}
    environment: ${{ matrix.region }}-approval
    steps:
      - name: Wait for manual approval
        run: echo "Waiting for approval to deploy to ${{ matrix.region }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Deploy to ${{ matrix.region }}
        run: |
          aws ecs update-service \
            --cluster ${{ needs.build.outputs.env }}-${{ inputs.brand-name }}-cluster \
            --service ${{ needs.build.outputs.env }}-${{ inputs.brand-name }}-${{ inputs.repository-name }} \
            --region ${{ matrix.region }} \
            --force-new-deployment

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3.15.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: custom
          channel: ${{ inputs.slack-channel }}
          text: |
            ✅ *Deployment Success*
            • Region: `${{ toJSON(matrix.region) }}`
            • Cluster: `${{ toJSON(needs.build.outputs.env) }}-${{ toJSON(inputs.brand-name) }}-cluster`
            • Status: Successfully deployed

  notify-approval-required:
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.outputs.manual-regions != ''
    strategy:
      matrix:
        region: ${{ fromJson(needs.build.outputs.manual_regions_json) }}
    steps:
      - name: Notify manual approval required
        uses: 8398a7/action-slack@v3.15.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: custom
          channel: ${{ inputs.slack-channel }}
          text: |
            ⏳ *Manual Approval Required*
            • Region: `${{ toJSON(matrix.region) }}`
            • Team: ${{ toJSON(inputs.slack-team) }}`
            • Deployment is waiting for manual approval in ${{ toJSON(matrix.region) }}
            • <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Click to review and approve>

  deployment-summary:
    needs: [build, deploy-auto-regions, deploy-manual-regions]
    runs-on: ubuntu-latest
    if: always()
    outputs:
      summary: ${{ steps.generate-summary.outputs.summary }}
    steps:
      - name: Generate deployment summary
        id: generate-summary
        run: |
          SUMMARY="*Deployment Summary for ${{ inputs.repository-name }}*\n"
          SUMMARY+="• Branch: \`${{ inputs.branch-name }}\`\n"
          SUMMARY+="• Team: ${{ inputs.slack-team }}\n"
          SUMMARY+="• Environment: ${{ needs.build.outputs.env }}\n\n"

          # Add auto-deployment results
          if [ -n "${{ needs.build.outputs.auto_regions }}" ]; then
            SUMMARY+="*Auto-Deployed Regions:*\n"
            IFS=',' read -ra AUTO_REGIONS <<< "${{ needs.build.outputs.auto_regions }}"
            for region in "${AUTO_REGIONS[@]}"; do
              SUMMARY+="• ✅ \`$region\` - Deployed automatically\n"
            done
            SUMMARY+="\n"
          fi

          # Add manual deployment results
          if [ -n "${{ needs.build.outputs.manual_regions }}" ]; then
            SUMMARY+="*Manual Approval Regions:*\n"
            IFS=',' read -ra MANUAL_REGIONS <<< "${{ needs.build.outputs.manual_regions }}"
            for region in "${MANUAL_REGIONS[@]}"; do
              SUMMARY+="• ⏳ \`$region\` - Requires manual approval\n"
            done
          fi

          echo "summary=$SUMMARY" >> $GITHUB_OUTPUT

      - name: Notify deployment summary
        uses: 8398a7/action-slack@v3.15.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: custom
          channel: ${{ inputs.slack-channel }}
          text: |
            📊 *Deployment Summary*
            ${{ steps.generate-summary.outputs.summary }}
