name: Reusable ECS Deployment Workflow

on:
  workflow_call:
    inputs:
      is_monorepo:
        required: true
        type: boolean
      apps:
        required: false
        type: string
      aws_region:
        required: true
        type: string
      dr_aws_region:
        required: false
        type: string
        default: ""
      ecs_cluster_name:
        required: true
        type: string
      build_args:
        required: false
        type: string
        default: ""
      github_repo:
        required: true
        type: string
      github_branch:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  build-and-push:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Retrieve AWS Account ID
        id: aws-account-id
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV

      - name: Build and Push Docker Images for Monorepo v1
        if: ${{ inputs.is_monorepo }}
        env:
          IMAGE_TAG: latest
        run: |
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.${{ inputs.aws_region }}.amazonaws.com"
          for app in ${{ inputs.apps }}; do
            SERVICE_NAME=${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-$app
            docker build -t $ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG . --build-arg=APP_NAME=$app
            docker push    $ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG
          done

      - name: Build, tag, and push image to Amazon ECR v2
        if: ${{ !inputs.is_monorepo }}
        env:
          IMAGE_TAG: latest
          SERVICE_NAME: ${{ inputs.github_branch }}-${{ inputs.github_repo }}
        run: |
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.${{ inputs.aws_region }}.amazonaws.com"
          docker build ${{ inputs.build_args }} -t $ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG .
          docker push    $ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG

  deploy:
    name: Deploy to ECS
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Deploy to ECS for monorepo
        if: ${{ inputs.is_monorepo }}
        run: |
          for app in ${{ inputs.apps }}; do
            SERVICE_NAME=${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-$app
            CLUSTER_NAME=${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-aviator-cluster
            aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment
          done

      - name: Deploy to ECS for single repo
        if: ${{ !inputs.is_monorepo }}
        run: |
          SERVICE_NAME=${{ inputs.github_branch }}-${{ inputs.github_repo }}
          CLUSTER_NAME=${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-aviator-cluster
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment

  validate-dr:
    name: Validate DR region
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.check.outputs.skip }}
    steps:
      - name: Check DR-region input & availability
        id: check
        run: |
          if [ -z "${{ inputs.dr_aws_region }}" ]; then
            echo "::set-output name=skip::true"
            exit 0
          fi
          if ! aws ec2 describe-regions \
               --region us-east-1 \
               --filters Name=region-name,Values="${{ inputs.dr_aws_region }}" \
               --query "Regions[0].RegionName" \
               --output text >/dev/null; then
            echo "::set-output name=skip::true"
          else
            echo "::set-output name=skip::false"
          fi

  dr_build-and-push:
    name: Build and push Docker image in DR region
    needs: validate-dr
    if: needs.validate-dr.outputs.skip == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials for DR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.dr_aws_region }}

      - name: Log in to Amazon ECR in DR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Retrieve AWS Account ID for DR
        id: dr-aws-account-id
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV

      - name: Build and Push Docker Images for Monorepo in DR
        if: ${{ inputs.is_monorepo }}
        run: |
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.${{ inputs.dr_aws_region }}.amazonaws.com"
          for app in ${{ inputs.apps }}; do
            SERVICE=${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-$app
            if aws ecr describe-repositories --repository-names "$SERVICE" --region "${{ inputs.dr_aws_region }}" >/dev/null 2>&1; then
              docker build -t "$ECR_REGISTRY/$SERVICE:latest" . --build-arg=APP_NAME=$app
              docker push    "$ECR_REGISTRY/$SERVICE:latest"
            else
              echo "→ Repo '$SERVICE' not found in ${{ inputs.dr_aws_region }}—skipping"
            fi
          done

      - name: Build, tag, and push image to Amazon ECR in DR
        if: ${{ !inputs.is_monorepo }}
        run: |
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.${{ inputs.dr_aws_region }}.amazonaws.com"
          SERVICE=${{ inputs.github_branch }}-${{ inputs.github_repo }}
          if aws ecr describe-repositories --repository-names "$SERVICE" --region "${{ inputs.dr_aws_region }}" >/dev/null 2>&1; then
            docker build ${{ inputs.build_args }} -t "$ECR_REGISTRY/$SERVICE:latest" .
            docker push    "$ECR_REGISTRY/$SERVICE:latest"
          else
            echo "→ Repo '$SERVICE' not found in ${{ inputs.dr_aws_region }}—skipping"
          fi

  dr_deploy:
    name: Deploy to ECS in DR region
    needs: [validate-dr, dr_build-and-push]
    if: needs.validate-dr.outputs.skip == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials for DR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.dr_aws_region }}

      - name: Deploy to ECS in DR for monorepo
        if: ${{ inputs.is_monorepo }}
        run: |
          for app in ${{ inputs.apps }}; do
            SERVICE=${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-$app
            CLUSTER=${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-aviator-cluster
            if aws ecs describe-services --cluster "$CLUSTER" --services "$SERVICE" --region "${{ inputs.dr_aws_region }}" >/dev/null 2>&1; then
              aws ecs update-service --cluster "$CLUSTER" --service "$SERVICE" --force-new-deployment
            else
              echo "→ Service '$SERVICE' not found in ${{ inputs.dr_aws_region }}—skipping"
            fi
          done

      - name: Deploy to ECS in DR for single repo
        if: ${{ !inputs.is_monorepo }}
        run: |
          SERVICE=${{ inputs.github_branch }}-${{ inputs.github_repo }}
          CLUSTER=${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-aviator-cluster
          if aws ecs describe-services --cluster "$CLUSTER" --services "$SERVICE" --region "${{ inputs.dr_aws_region }}" >/dev/null 2>&1; then
            aws ecs update-service --cluster "$CLUSTER" --service "$SERVICE" --force-new-deployment
          else
            echo "→ Service '$SERVICE' not found in ${{ inputs.dr_aws_region }}—skipping"
          fi
