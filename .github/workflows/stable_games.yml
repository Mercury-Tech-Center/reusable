name: Reusable ECS Deployment Workflow

on:
  workflow_call:
    inputs:
      is_monorepo:
        required: true
        type: boolean
      apps:
        required: false
        type: string
      aws_region:
        required: true
        type: string
      dr_aws_region:
        required: false
        type: string
        default: ""
      ecs_cluster_name:
        required: true
        type: string
      build_args:
        required: false
        type: string
        default: ""
      github_repo:
        required: true
        type: string
      github_branch:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  build-and-push:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Retrieve AWS Account ID
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> "$GITHUB_ENV"

      - name: Build and Push Docker Images for Monorepo
        if: ${{ inputs.is_monorepo }}
        env:
          IMAGE_TAG: latest
        run: |
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.${{ inputs.aws_region }}.amazonaws.com"
          for app in ${{ inputs.apps }}; do
            SERVICE_NAME=${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-"$app"
            docker build -t "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG" . --build-arg=APP_NAME="$app"
            docker push    "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG"
          done

      - name: Build, tag, and push image (single repo)
        if: ${{ !inputs.is_monorepo }}
        env:
          IMAGE_TAG: latest
          SERVICE_NAME: ${{ inputs.github_branch }}-${{ inputs.github_repo }}
        run: |
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.${{ inputs.aws_region }}.amazonaws.com"
          docker build ${{ inputs.build_args }} -t "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG" .
          docker push    "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG"

  deploy:
    name: Deploy to ECS
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Deploy to ECS for monorepo
        if: ${{ inputs.is_monorepo }}
        run: |
          for app in ${{ inputs.apps }}; do
            SERVICE_NAME=${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-"$app"
            CLUSTER_NAME=${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-aviator-cluster
            aws ecs update-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" --force-new-deployment
          done

      - name: Deploy to ECS for single repo
        if: ${{ !inputs.is_monorepo }}
        run: |
          SERVICE_NAME=${{ inputs.github_branch }}-${{ inputs.github_repo }}
          CLUSTER_NAME=${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-aviator-cluster
          aws ecs update-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" --force-new-deployment

  dr_prep_matrix:
    name: Prepare DR matrix
    runs-on: ubuntu-latest
    outputs:
      regions: ${{ steps.mk.outputs.regions }}
      count: ${{ steps.mk.outputs.count }}
    steps:
      - id: mk
        shell: bash
        run: |
          RAW="${{ inputs.dr_aws_region }}"
          if [ -z "$RAW" ]; then
            echo "regions=[]" >> "$GITHUB_OUTPUT"
            echo "count=0" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          CLEAN=$(echo "$RAW" | tr -d ' ')
          IFS=',' read -r -a parts <<< "$CLEAN"

          JSON="["
          for r in "${parts[@]}"; do
            JSON="$JSON\"$r\","
          done
          JSON="${JSON%,}]"

          echo "regions=$JSON" >> "$GITHUB_OUTPUT"
          echo "count=${#parts[@]}" >> "$GITHUB_OUTPUT"

  dr_build-and-push:
    name: Build and push Docker image in DR regions
    needs: dr_prep_matrix
    if: needs.dr_prep_matrix.outputs.count != '0'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        region: ${{ fromJSON(needs.dr_prep_matrix.outputs.regions) }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (DR)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Log in to Amazon ECR (DR)
        uses: aws-actions/amazon-ecr-login@v2

      - name: Retrieve AWS Account ID (DR)
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> "$GITHUB_ENV"

      - name: Build and Push Docker Images for Monorepo (DR)
        if: ${{ inputs.is_monorepo }}
        env:
          IMAGE_TAG: latest
        run: |
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.${{ matrix.region }}.amazonaws.com"
          for app in ${{ inputs.apps }}; do
            SERVICE="${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-$app"
            if aws ecr describe-repositories --repository-names "$SERVICE" --region "${{ matrix.region }}" >/dev/null 2>&1; then
              docker build -t "$ECR_REGISTRY/$SERVICE:$IMAGE_TAG" . --build-arg=APP_NAME="$app"
              docker push    "$ECR_REGISTRY/$SERVICE:$IMAGE_TAG"
            else
              echo "→ Repo '$SERVICE' not found in ${{ matrix.region }} — skipping"
            fi
          done

      - name: Build, tag, and push image (single repo, DR)
        if: ${{ !inputs.is_monorepo }}
        env:
          IMAGE_TAG: latest
        run: |
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.${{ matrix.region }}.amazonaws.com"
          SERVICE="${{ inputs.github_branch }}-${{ inputs.github_repo }}"
          if aws ecr describe-repositories --repository-names "$SERVICE" --region "${{ matrix.region }}" >/dev/null 2>&1; then
            docker build ${{ inputs.build_args }} -t "$ECR_REGISTRY/$SERVICE:$IMAGE_TAG" .
            docker push    "$ECR_REGISTRY/$SERVICE:$IMAGE_TAG"
          else
            echo "→ Repo '$SERVICE' not found in ${{ matrix.region }} — skipping"
          fi

  dr_deploy:
    name: Deploy to ECS in DR regions
    needs: [dr_prep_matrix, dr_build-and-push]
    if: needs.dr_prep_matrix.outputs.count != '0'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        region: ${{ fromJSON(needs.dr_prep_matrix.outputs.regions) }}
    steps:
      - name: Configure AWS credentials (DR)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Deploy to ECS for monorepo (DR)
        if: ${{ inputs.is_monorepo }}
        run: |
          for app in ${{ inputs.apps }}; do
            SERVICE="${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-$app"
            CLUSTER="${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-aviator-cluster"
            if aws ecs describe-services --cluster "$CLUSTER" --services "$SERVICE" --region "${{ matrix.region }}" >/dev/null 2>&1; then
              aws ecs update-service --cluster "$CLUSTER" --service "$SERVICE" --force-new-deployment --region "${{ matrix.region }}"
            else
              echo "→ Service '$SERVICE' not found in ${{ matrix.region }} — skipping"
            fi
          done

      - name: Deploy to ECS for single repo (DR)
        if: ${{ !inputs.is_monorepo }}
        run: |
          SERVICE="${{ inputs.github_branch }}-${{ inputs.github_repo }}"
          CLUSTER="${{ inputs.github_branch }}-${{ inputs.ecs_cluster_name }}-aviator-cluster"
          if aws ecs describe-services --cluster "$CLUSTER" --services "$SERVICE" --region "${{ matrix.region }}" >/dev/null 2>&1; then
            aws ecs update-service --cluster "$CLUSTER" --service "$SERVICE" --force-new-deployment --region "${{ matrix.region }}"
          else
            echo "→ Service '$SERVICE' not found in ${{ matrix.region }} — skipping"
          fi
